{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_ekaToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_ekbToken",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "allowance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "needed",
						"type": "uint256"
					}
				],
				"name": "ERC20InsufficientAllowance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "needed",
						"type": "uint256"
					}
				],
				"name": "ERC20InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "approver",
						"type": "address"
					}
				],
				"name": "ERC20InvalidApprover",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					}
				],
				"name": "ERC20InvalidReceiver",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "ERC20InvalidSender",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "ERC20InvalidSpender",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "provider",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ekaAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ekbAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityMinted",
						"type": "uint256"
					}
				],
				"name": "LiquidityProvided",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "provider",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ekaAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ekbAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityBurned",
						"type": "uint256"
					}
				],
				"name": "LiquidityWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "inputAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "outputAmount",
						"type": "uint256"
					}
				],
				"name": "TokenExchange",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "desiredAmountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "desiredAmountB",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minimumAmountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minimumAmountB",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "expirationTime",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "actualAmountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "actualAmountB",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "liquidityTokens",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ekaToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ekbToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "inputAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "inputReserve",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "outputReserve",
						"type": "uint256"
					}
				],
				"name": "getAmountOut",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "expectedOutput",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					}
				],
				"name": "getPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "currentPrice",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getReserves",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "ekaReserve",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ekbReserve",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getSupportedTokens",
				"outputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "liquidityAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minimumAmountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minimumAmountB",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "expirationTime",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "withdrawnAmountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "withdrawnAmountB",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "inputAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minimumOutput",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "tradingPath",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "expirationTime",
						"type": "uint256"
					}
				],
				"name": "swapExactTokensForTokens",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "outputAmounts",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Decentralized exchange contract for swapping between TokenA (EKA) and TokenB (EKB)Implements automated market maker functionality with liquidity provision",
			"errors": {
				"ERC20InsufficientAllowance(address,uint256,uint256)": [
					{
						"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
						"params": {
							"allowance": "Amount of tokens a `spender` is allowed to operate with.",
							"needed": "Minimum amount required to perform a transfer.",
							"spender": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"ERC20InsufficientBalance(address,uint256,uint256)": [
					{
						"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
						"params": {
							"balance": "Current balance for the interacting account.",
							"needed": "Minimum amount required to perform a transfer.",
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC20InvalidApprover(address)": [
					{
						"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
						"params": {
							"approver": "Address initiating an approval operation."
						}
					}
				],
				"ERC20InvalidReceiver(address)": [
					{
						"details": "Indicates a failure with the token `receiver`. Used in transfers.",
						"params": {
							"receiver": "Address to which tokens are being transferred."
						}
					}
				],
				"ERC20InvalidSender(address)": [
					{
						"details": "Indicates a failure with the token `sender`. Used in transfers.",
						"params": {
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC20InvalidSpender(address)": [
					{
						"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
						"params": {
							"spender": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "dev",
			"methods": {
				"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
					"details": "Calculates optimal token amounts based on current pool ratios",
					"params": {
						"desiredAmountA": "Maximum amount of tokenA willing to deposit",
						"desiredAmountB": "Maximum amount of tokenB willing to deposit",
						"expirationTime": "Transaction deadline timestamp",
						"minimumAmountA": "Minimum amount of tokenA to accept (slippage protection)",
						"minimumAmountB": "Minimum amount of tokenB to accept (slippage protection)",
						"recipient": "Address that will receive the liquidity tokens",
						"tokenA": "Address of first token (must be EKA or EKB)",
						"tokenB": "Address of second token (must be EKA or EKB)"
					},
					"returns": {
						"actualAmountA": "Actual amount of tokenA deposited",
						"actualAmountB": "Actual amount of tokenB deposited",
						"liquidityTokens": "Amount of LP tokens minted to recipient"
					}
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"constructor": {
					"details": "Constructor initializes the contract with TokenA and TokenB addresses",
					"params": {
						"_ekaToken": "Address of the deployed TokenA (EKA) contract",
						"_ekbToken": "Address of the deployed TokenB (EKB) contract"
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"getAmountOut(uint256,uint256,uint256)": {
					"params": {
						"inputAmount": "Amount of input tokens",
						"inputReserve": "Current reserve of input token",
						"outputReserve": "Current reserve of output token"
					},
					"returns": {
						"expectedOutput": "Calculated output amount"
					}
				},
				"getPrice(address,address)": {
					"params": {
						"tokenA": "Base token address",
						"tokenB": "Quote token address  "
					},
					"returns": {
						"currentPrice": "Price ratio"
					}
				},
				"getReserves()": {
					"returns": {
						"ekaReserve": "Current EKA token balance in contract",
						"ekbReserve": "Current EKB token balance in contract"
					}
				},
				"getSupportedTokens()": {
					"returns": {
						"tokenA": "Address of EKA token contract",
						"tokenB": "Address of EKB token contract"
					}
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
					"params": {
						"expirationTime": "Transaction deadline timestamp",
						"liquidityAmount": "Amount of LP tokens to burn",
						"minimumAmountA": "Minimum amount of tokenA to receive",
						"minimumAmountB": "Minimum amount of tokenB to receive",
						"recipient": "Address that will receive the underlying tokens",
						"tokenA": "Address of first token (must be EKA or EKB)",
						"tokenB": "Address of second token (must be EKA or EKB)"
					},
					"returns": {
						"withdrawnAmountA": "Amount of tokenA returned to recipient",
						"withdrawnAmountB": "Amount of tokenB returned to recipient"
					}
				},
				"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
					"params": {
						"expirationTime": "Transaction deadline timestamp",
						"inputAmount": "Exact amount of input tokens to trade",
						"minimumOutput": "Minimum acceptable amount of output tokens",
						"recipient": "Address that will receive the output tokens",
						"tradingPath": "Array containing [inputToken, outputToken] addresses"
					},
					"returns": {
						"outputAmounts": "Array containing [inputAmount, actualOutputAmount]"
					}
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
				}
			},
			"stateVariables": {
				"INITIAL_RESERVE": {
					"details": "Set to 1 to allow initial calculations without special handling"
				},
				"MINIMUM_LOCKED_LIQUIDITY": {
					"details": "Prevents liquidity drain attacks and maintains price stability"
				}
			},
			"title": "SimpleSwap",
			"version": 1
		},
		"userdoc": {
			"events": {
				"LiquidityProvided(address,uint256,uint256,uint256)": {
					"notice": "Emitted when liquidity is added to the pool"
				},
				"LiquidityWithdrawn(address,uint256,uint256,uint256)": {
					"notice": "Emitted when liquidity is removed from the pool"
				},
				"TokenExchange(address,address,uint256,uint256)": {
					"notice": "Emitted when tokens are swapped"
				}
			},
			"kind": "user",
			"methods": {
				"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
					"notice": "Adds liquidity to the EKA/EKB trading pair"
				},
				"ekaToken()": {
					"notice": "Address of TokenA (EKA) contract"
				},
				"ekbToken()": {
					"notice": "Address of TokenB (EKB) contract  "
				},
				"getAmountOut(uint256,uint256,uint256)": {
					"notice": "Calculates expected output amount for a given input without fees"
				},
				"getPrice(address,address)": {
					"notice": "Returns current price of tokenA in terms of tokenB"
				},
				"getReserves()": {
					"notice": "Returns current reserves of both tokens in the pool"
				},
				"getSupportedTokens()": {
					"notice": "Returns the token addresses supported by this DEX"
				},
				"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
					"notice": "Removes liquidity from the pool by burning LP tokens"
				},
				"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
					"notice": "Swaps exact input tokens for output tokens"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"SimpleSwap.sol": "SimpleSwap"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a",
			"license": "MIT",
			"urls": [
				"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a",
				"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"SimpleSwap.sol": {
			"keccak256": "0x66d7231aacd7a4298d77f93c9e271ad0bbb10ebc8b3349742c7b9766a1753d1a",
			"license": "MIT",
			"urls": [
				"bzz-raw://d363445938f973aa494172f22c6b8de410920edf2df442885f18f94e8c2b3e37",
				"dweb:/ipfs/QmUpftviB7LAcpCLdAxRcGMiXaZdgQrye8nrmyKdLq33Ph"
			]
		}
	},
	"version": 1
}